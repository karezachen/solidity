import{_ as e,r as t,o as p,c as o,a as c,b as n,d as i,w as l,f as s}from"./app-72b288d9.js";const u={},r=s(`<h1 id="提现" tabindex="-1"><a class="header-anchor" href="#提现" aria-hidden="true">#</a> 提现</h1><p>在本节一个非常重要的概念 —— 提现</p><p>当我们部署的智能合约接受到调用方支付的以太之后，</p><p>非常关键的一件事情，我们该如何将以太提现到自己的账户呢？</p><p>废话少说，直接上代码：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token punctuation">{</span>
	<span class="token comment">// 判断调用方是否合约为所有者</span>
	<span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 将余额转给合约所有者</span>
	owner<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用transfer向任何以太坊地址付钱，</p><p>所以我们也可以在调用方超额付款的时候给他们退钱，</p>`,8),d=s(`<div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>
  <span class="token comment">// 检查调用方是否支付0.001以太</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">&gt;=</span> <span class="token number">0.001</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 将超额付款退回</span>
  msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">-</span> <span class="token number">0.001</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 如果已支付，则运行函数逻辑</span>
  <span class="token keyword">do</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function k(m,v){const a=t("RouterLink");return p(),o("div",null,[r,c("p",null,[n("让我们强化下"),i(a,{to:"/payable.html"},{default:l(()=>[n("可提现")]),_:1}),n("中的代码：")]),d])}const h=e(u,[["render",k],["__file","withdrawal.html.vue"]]);export{h as default};
